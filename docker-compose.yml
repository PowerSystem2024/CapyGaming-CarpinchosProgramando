
services:
  # Base de datos PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: capygaming-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

    #ports:
      #- "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - capygaming-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Node.js
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: capygaming-backend
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment: 
      NODE_ENV: ${NODE_ENV}
      PORT: ${PORT}
      DB_USER: ${DB_USER}
      DB_HOST: ${DB_HOST}
      DB_NAME: ${DB_NAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_PORT: ${DB_PORT}
      JWT_SECRET: ${JWT_SECRET}
      FRONTEND_URL: ${FRONTEND_URL}
    ports:
      - "3001:3001"
    networks:
      - capygaming-network
    volumes:
      - ./backend:/app
      - /app/node_modules


  # Frontend Vue.js con Nginx
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: capygaming-frontend
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "80:80"
    networks:
      - capygaming-network

# Vol√∫menes persistentes
volumes:
  postgres_data:
    driver: local

# Red personalizada
networks:
  capygaming-network:
    driver: bridge